
# Simple reverse proxy with CORS support
server {
  listen 80;
  listen [::]:80;

  server_name _;

  # Rule to directly return a hardcoded favicon.ico
  location = /favicon.ico {
    log_not_found off;
    access_log off;
    # default_type image/x-icon;
    # add_header Content-Encoding base64;
    return 204;
  }
  
  location /layout {
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
    add_header 'Access-Control-Allow-Methods' 'GET,OPTIONS';

    if ($request_method = 'OPTIONS') {
      add_header 'Access-Control-Allow-Origin' '*';
      add_header 'Access-Control-Allow-Credentials' 'true';
      add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
      add_header 'Access-Control-Allow-Methods' 'GET,OPTIONS';
      add_header 'Access-Control-Max-Age' 1728000;
      add_header 'Content-Type' 'text/plain charset=UTF-8';
      add_header 'Content-Length' 0;
      return 204;
    }

    # Cache injection
    # rewrite_log on;
    # # If present, rewrite the 'image_url' GET parameter as follows:
    # -> cache case is now managed later
    # # If the 'image_url' parameter is present but starts with "http://cache/", return a 404 error to avoid loops.
    # if ($arg_image_url ~* "http://cache/(.*)") {
    #   return 404;
    # }


    # Block request if $new_image_url is empty (i.e., unapproved URL)
    if ($new_image_url = "") {
        return 403;
    }

    # VERSION AVEC REWRITE OLD
    # # If the rewritten URL is different, modify the query string before proxying
    # if ($new_image_url != $arg_image_url) {
    #     rewrite ^(.*)$ $1?image_url=$new_image_url break;
    # }

    # VERSION AVEC REWRITE NEW
    # # If the rewritten URL is different, modify the query string before proxying
    # # if ($new_image_url != $arg_image_url) {
    #   rewrite ^(.*?)(^|&)image_url=[^&]+(.*)$ $1$2image_url=$new_image_url$3 break;
    # # }


    # VERSION AVEC SET
    # Use a regular expression to rebuild the query string with the modified image_url
    set $new_query_string $query_string;

    # if ($query_string ~ "^(.*?)(^|&)image_url=[^&]+(.*)$") {
    #     set $new_query_string $1$2image_url=$new_image_url$3;
    # }

    # Define a resolver otherwise the worker container cannot be resolved when $request_uri is specified
    resolver 127.0.0.11 valid=10s;  # Docker internal DNS

    # Proxy configuration
    proxy_redirect off;
    proxy_set_header host $host;
    proxy_set_header X-real-ip $remote_addr;
    proxy_set_header X-forward-for $proxy_add_x_forwarded_for;
    # proxy_pass http://worker:8000/$request_uri;  # -> resolver defined to resolve worker
    proxy_pass http://worker:8000$request_uri;  # -> resolver defined to resolve worker
    # proxy_pass http://worker:8000;  # -> error in worker because it cannot access the image_url
    # if ($arg_image_url ~* "https://openapi.bnf.fr/(.*)") {
    #   set $arg_image_url "http://cache/gallica/$1";
    # }
  }
}